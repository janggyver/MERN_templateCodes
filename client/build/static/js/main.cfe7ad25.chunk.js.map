{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDB","fetch","then","json","res","_this","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","this","setInterval","clearInterval","_this2","react_default","a","createElement","length","style","padding","key","color","type","onChange","e","target","value","placeholder","width","onClick","placeholer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfe7ad25.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nclass App extends Component {\n\n  //initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null\n  };\n\n  //when component mounts, first thing it does is fetch all exisitng data in our db\n  //then we incorporate a polling logic so that we can easily see if our db has\n  //changed and implement thouse changes into our UI\n  componentDidMount(){\n    this.getDataFromDB();\n    if(!this.state.intervalIsSet){\n      let interval = setInterval(this.getDataFromDB, 1000);\n    }\n  }\n\n  //never let a process live forever\n  //always kill a process everytime we are done using it\n  componentWillMount(){\n    if(this.state.intervalIsSet){\n      clearInterval(this.state.intervalIsSet);\n      this.setState({intervalIsSet: null});\n    }\n  }\n\n  //in the front end, we use the id key of our data object\n  //in order to identify which we want to update or delete.\n  //for our backend, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  //our first get method that uses our backend api to\n  //fetch data from our data base\n  getDataFromDB = () => {\n    fetch(\"api/getData\")\n    .then(data => data.json())\n    .then(res => this.setState({data: res.data}));\n  };\n\n  //our put method that uses our backend api\n  //to create new query into our database\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while(currentIds.includes(idToBeAdded)){\n      ++idToBeAdded;\n    }\n\n    axios.post(\"api/putData\", {\n      id: idToBeAdded,\n      message: message\n    })\n  }\n\n  //our delete method that uses our backend api\n  // to remove exisiting database information\n  deleteFromDB = idToDelete => {\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if(dat.id === idToDelete){\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n\n  //our update method that uses our backend api\n  //to overwirte existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    this.state.data.forEach(dat => {\n      if(dat.id === idToUpdate){\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"api/updateData\", {\n      id: objIdToUpdate,\n      update: { message: updateToApply}\n    });\n  };\n\n\n  //here is our UI\n\n  render() {\n    const {data} = this.state;\n    return (\n      <div >\n        <ul>\n          {data.length <= 0\n          ? \"No DB entries yet\"\n          : data.map(dat => (\n            <li style={{padding: \"10px\"}} key={data.message}>\n              <span style={{color: \"gray\"}}> id: </span> {dat.id} <br />\n              <span style={{color: \"gray\"}}> data: </span> {dat.message}\n            </li>\n            ))\n           }\n        </ul>\n        <div style={{padding: \"10px\"}}>\n           <input\n            type = \"text\"\n            onChange = {e => this.setState({message: e.target.value})}\n            placeholder = \"add something in the database\"\n            style = {{width: \"200px\"}}\n           />\n           <button onClick = {() => { this.putDataToDB(this.state.message)}}>\n            ADD\n           </button>\n        </div>\n        <div style={{padding: \"10px\"}}>\n           <input\n            type = \"text\"\n            style = {{width: \"200px\"}}\n            onChange = {e => this.setState({idToDelete: e.target.value})}\n            placeholer = \"put id of item to delete here\"\n           />\n           <button onClick = {() => this.deleteFromDB(this.state.idToDelete)}>\n           DELETE\n           </button>\n        </div>\n        <div style={{padding: \"10px\"}}>\n           <input\n            type = \"text\"\n            style ={{width: \"200px\"}}\n            onChange = {e => this.setState({idToUpdate: e.target.value})}\n            placeholder = \"id of item to update here\"\n           />\n           <input\n            type= \"text\"\n            style = {{width: \"200px\"}}\n            onChange = { e => this.setState({updateToApply: e.target.value})}\n            placeholder = \"put new value of the item here\"\n           />\n           <button\n            onClick = { () => {\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }}\n           >\n           UPDATE\n           </button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}